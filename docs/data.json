{
    "project": {
        "name": "database",
        "version": "0.0.0"
    },
    "files": {
        "src/__database/query-object/exec.js": {
            "name": "src/__database/query-object/exec.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/__database/query-object/meta.js": {
            "name": "src/__database/query-object/meta.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/__database/filtered-collection.js": {
            "name": "src/__database/filtered-collection.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/__database/xhr.js": {
            "name": "src/__database/xhr.js",
            "modules": {
                "xhr": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/index.js": {
            "name": "src/index.js",
            "modules": {
                "database": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "database": {
            "name": "database",
            "submodules": {
                "xhr": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/index.js",
            "line": 5,
            "description": "AMD module."
        },
        "xhr": {
            "name": "xhr",
            "submodules": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "database",
            "namespace": "",
            "file": "src/__database/xhr.js",
            "line": 1,
            "description": "Stuff related to xhr."
        }
    },
    "classes": {},
    "classitems": [
        {
            "file": "src/__database/query-object/exec.js",
            "line": 13,
            "description": "The heart S2.",
            "itemtype": "method",
            "name": "sync",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "src/__database/query-object/exec.js",
            "line": 38,
            "description": "Syncs the database then does a clientExec.",
            "itemtype": "method",
            "name": "exec",
            "class": ""
        },
        {
            "file": "src/__database/query-object/exec.js",
            "line": 60,
            "description": "Runs 'database.query',\nchecks for query meta attributes.\n\nIf a sort is required, calls the database 'multisort' method.\nRuns database.query using the cursor's criteria hash and a projection object.\n\nIf a skip is defined, use the Lazy object's rest() method.\nIf a limit is defined, use Lazy object's take() method.",
            "itemtype": "method",
            "name": "clientExec",
            "params": [
                {
                    "name": "projection",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Lazy(models)"
            },
            "class": ""
        },
        {
            "file": "src/__database/query-object/meta.js",
            "line": 10,
            "description": "Either sets or gets a query-metadata.",
            "itemtype": "method",
            "name": "meta",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*",
                    "optional": true
                }
            ],
            "class": ""
        },
        {
            "file": "src/__database/query-object/meta.js",
            "line": 41,
            "description": "Sets the special meta-data relative to sorting order.\nThis method must be called individually, so that\nthe sorting priority is defined by method calling order.\n\nIf the method is called",
            "itemtype": "method",
            "name": "sortBy",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String|Array"
                },
                {
                    "name": "direction",
                    "description": "",
                    "type": "+1, -1|Object"
                }
            ],
            "class": ""
        },
        {
            "file": "src/__database/filtered-collection.js",
            "line": 1,
            "description": "Defines general logic for filtered collections.",
            "params": [
                {
                    "name": "require",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "exports",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "module",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": ""
        },
        {
            "file": "src/__database/filtered-collection.js",
            "line": 24,
            "description": "Initialization logic for filtered collection.\nUses database module specifications.",
            "params": [
                {
                    "name": "models",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "options",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": ""
        },
        {
            "file": "src/__database/filtered-collection.js",
            "line": 60,
            "description": "Either boolean or array.\nIf array, is the selection of attribtes tobe\nused for filtering.",
            "type": "{Boolean}",
            "class": ""
        },
        {
            "file": "src/__database/filtered-collection.js",
            "line": 70,
            "description": "Formats the criteria object.\nBasically deletes 'falsey' values.",
            "params": [
                {
                    "name": "criteria",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": ""
        },
        {
            "file": "src/__database/filtered-collection.js",
            "line": 90,
            "description": "The property that holds pageLength\nMay be set on instantiation or extension.",
            "type": "{Number}",
            "class": ""
        },
        {
            "file": "src/__database/filtered-collection.js",
            "line": 98,
            "description": "Handles change events on the filterModel model property.\nBasically does querying on the datbase and resets the collection.",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": ""
        },
        {
            "file": "src/__database/filtered-collection.js",
            "line": 132,
            "description": "Method to be executed to retrieve filtered items.",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": ""
        },
        {
            "file": "src/__database/xhr.js",
            "line": 17,
            "description": "Options object to be passed to the $.ajax method\nExample: { dataType: 'jsonp' }",
            "itemtype": "property",
            "name": "xhrOptions",
            "type": "Object",
            "class": "",
            "module": "database",
            "submodule": "xhr"
        },
        {
            "file": "src/__database/xhr.js",
            "line": 26,
            "description": "Coordinates the whole process of loading data from server.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "requestData",
                    "description": ""
                }
            ],
            "class": "",
            "module": "database",
            "submodule": "xhr"
        },
        {
            "file": "src/__database/xhr.js",
            "line": 45,
            "description": "before, we implemented the request by ourselves,\nso we had to parse and add the response.\nThe new implementation uses Bakcbone built-in fetch functionality, with some special options.",
            "class": "",
            "module": "database",
            "submodule": "xhr"
        },
        {
            "file": "src/__database/xhr.js",
            "line": 68,
            "description": "Maps the original requestData to\ndifferent keys.",
            "itemtype": "property",
            "name": "dataMap",
            "type": "Object",
            "class": "",
            "module": "database",
            "submodule": "xhr"
        },
        {
            "file": "src/__database/xhr.js",
            "line": 77,
            "description": "Receives a data object containing data about the request\nto be made to the database.\nShould return a data object with the mapped data names.",
            "itemtype": "method",
            "name": "mapRequestData",
            "params": [
                {
                    "name": "requestData",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "dataMap",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "",
            "module": "database",
            "submodule": "xhr"
        },
        {
            "file": "src/__database/xhr.js",
            "line": 105,
            "itemtype": "method",
            "name": "cache",
            "params": [
                {
                    "name": "rData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "",
            "module": "database",
            "submodule": "xhr"
        },
        {
            "file": "src/__database/xhr.js",
            "line": 121,
            "description": "Either defines or retrieves the sync status for a given\nrequestData.",
            "itemtype": "method",
            "name": "syncStatus",
            "params": [
                {
                    "name": "requestData",
                    "description": ""
                },
                {
                    "name": "interval",
                    "description": ""
                },
                {
                    "name": "status",
                    "description": ""
                }
            ],
            "class": "",
            "module": "database",
            "submodule": "xhr"
        },
        {
            "file": "src/index.js",
            "line": 42,
            "description": "[initialize description]",
            "params": [
                {
                    "name": "models",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "options",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "",
            "module": "database"
        },
        {
            "file": "src/index.js",
            "line": 69,
            "description": "[defaultQueryMeta description]",
            "type": "{Object}",
            "class": "",
            "module": "database"
        },
        {
            "file": "src/index.js",
            "line": 78,
            "description": "Creates a query object linked to this\ndatabase.",
            "itemtype": "method",
            "name": "query",
            "params": [
                {
                    "name": "criteria",
                    "description": ""
                },
                {
                    "name": "metaData",
                    "description": ""
                }
            ],
            "class": "",
            "module": "database"
        },
        {
            "file": "src/index.js",
            "line": 101,
            "description": "Returns only one item.\nAs it is impossible to have gaps in 'one' sequence',\nalways resolve promise immediately in case one model is found.",
            "params": [
                {
                    "name": "criteria",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "",
            "module": "database"
        },
        {
            "file": "src/index.js",
            "line": 135,
            "description": "Instantiates a filtered collection with reference to the\ndatabase.",
            "params": [
                {
                    "name": "options",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "",
            "module": "database"
        },
        {
            "file": "src/index.js",
            "line": 146,
            "description": "Set the database reference.",
            "type": "{[type]}",
            "class": "",
            "module": "database"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nDefines general logic for filtered collections.",
            "line": " src/__database/filtered-collection.js:1"
        },
        {
            "message": "Missing item type\nInitialization logic for filtered collection.\nUses database module specifications.",
            "line": " src/__database/filtered-collection.js:24"
        },
        {
            "message": "Missing item type\nEither boolean or array.\nIf array, is the selection of attribtes tobe\nused for filtering.",
            "line": " src/__database/filtered-collection.js:60"
        },
        {
            "message": "Missing item type\nFormats the criteria object.\nBasically deletes 'falsey' values.",
            "line": " src/__database/filtered-collection.js:70"
        },
        {
            "message": "Missing item type\nThe property that holds pageLength\nMay be set on instantiation or extension.",
            "line": " src/__database/filtered-collection.js:90"
        },
        {
            "message": "Missing item type\nHandles change events on the filterModel model property.\nBasically does querying on the datbase and resets the collection.",
            "line": " src/__database/filtered-collection.js:98"
        },
        {
            "message": "Missing item type\nMethod to be executed to retrieve filtered items.",
            "line": " src/__database/filtered-collection.js:132"
        },
        {
            "message": "Missing item type\nbefore, we implemented the request by ourselves,\nso we had to parse and add the response.\nThe new implementation uses Bakcbone built-in fetch functionality, with some special options.",
            "line": " src/__database/xhr.js:45"
        },
        {
            "message": "Missing item type\n[initialize description]",
            "line": " src/index.js:42"
        },
        {
            "message": "Missing item type\n[defaultQueryMeta description]",
            "line": " src/index.js:69"
        },
        {
            "message": "Missing item type\nReturns only one item.\nAs it is impossible to have gaps in 'one' sequence',\nalways resolve promise immediately in case one model is found.",
            "line": " src/index.js:101"
        },
        {
            "message": "Missing item type\nInstantiates a filtered collection with reference to the\ndatabase.",
            "line": " src/index.js:135"
        },
        {
            "message": "Missing item type\nSet the database reference.",
            "line": " src/index.js:146"
        }
    ]
}